<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket在项目中的使用</title>
      <link href="/2022/05/10/blog8/"/>
      <url>/2022/05/10/blog8/</url>
      
        <content type="html"><![CDATA[<p>在一般的管理系统中，接口的请求的通信方式http，而在今年新接触的机器人系统部署管理工具中，运形的模式是上位机和本体底盘的通信(可以把机器人底盘看作一台主机服务器)，运用的通信方式要求是websocket，相对于ajax，websocket是一种全双工的同信，需要根据项目进行对应的封装，使其能够像封装ajax的axios进行相同的工作。</p><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h3><p>先来了解下eventBus, EventBus&nbsp;又称为事件总线。在项目框架中比如Vue中可以使用&nbsp;EventBus&nbsp;来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的灾难，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。但是，在一些特殊的情况下，vuex并不适合使用在vue3的一些自定义hooks以及组件, 在公司的websocket通信封装中，使用该方法进行消息的通信</p><p>在项目utils中定义eventBus:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> default class Event <span class="token punctuation">{</span>  <span class="token function-name function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this._eventList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    this._toString <span class="token operator">=</span> cb <span class="token operator">=</span><span class="token operator">&gt;</span> Object.toString.call<span class="token punctuation">(</span>cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token variable">$emit</span><span class="token punctuation">(</span>eventName, <span class="token punctuation">..</span>.args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    const event <span class="token operator">=</span> this._findEvent<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      event.params <span class="token operator">=</span> args      <span class="token builtin class-name">return</span> Promise.all<span class="token punctuation">(</span>event.callbacks?.map<span class="token punctuation">(</span>fnc <span class="token operator">=</span><span class="token operator">&gt;</span> fnc<span class="token punctuation">(</span><span class="token punctuation">..</span>.event.params<span class="token punctuation">))</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      this._addEvent<span class="token punctuation">(</span>eventName, args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> Promise.resolve<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token variable">$on</span><span class="token punctuation">(</span>eventName, cb, immediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    const event <span class="token operator">=</span> this._findEvent<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      const fnc <span class="token operator">=</span> event?.callbacks?.find<span class="token punctuation">(</span>fnc <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> this._toString<span class="token punctuation">(</span>fnc<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> this._toString<span class="token punctuation">(</span>cb<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fnc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        event.callbacks.push<span class="token punctuation">(</span>cb<span class="token punctuation">)</span>        // eslint-disable-next-line standard/no-callback-literal        immediate <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">(</span><span class="token punctuation">..</span>.event.params<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      this._addEvent<span class="token punctuation">(</span>eventName, <span class="token string">''</span>, <span class="token punctuation">[</span>cb<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token variable">$off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof eventName <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      const index <span class="token operator">=</span> this._eventList.findIndex<span class="token variable"><span class="token punctuation">((</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> event.eventName <span class="token operator">==</span><span class="token operator">=</span> eventName<span class="token punctuation">)</span>      if <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> {        this._eventList.splice<span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      }    } else if <span class="token punctuation">(</span>eventName instanceof Array<span class="token punctuation">)</span> {      eventName.map<span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">&gt;</span> this.$off<span class="token punctuation">(</span>m<span class="token punctuation">))</span></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      this._eventList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token variable">$once</span><span class="token punctuation">(</span>eventName, cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$emit</span><span class="token punctuation">(</span>eventName, cb, <span class="token boolean">true</span><span class="token punctuation">)</span>    this.<span class="token variable">$off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  _findEvent<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> this._eventList.find<span class="token punctuation">(</span>event <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>      event.eventName <span class="token operator">==</span><span class="token operator">=</span> eventName    <span class="token punctuation">))</span>  <span class="token punctuation">}</span>  _addEvent<span class="token punctuation">(</span>eventName, params, callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>    this._eventList.push<span class="token punctuation">(</span><span class="token punctuation">{</span>      eventName,      params: params ?? <span class="token string">''</span>,      callbacks: callbacks ?? <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="websocket-使用"><a href="#websocket-使用" class="headerlink" title="websocket 使用"></a>websocket 使用</h3><h3 id="websocket-通信数据结构示例"><a href="#websocket-通信数据结构示例" class="headerlink" title="websocket 通信数据结构示例"></a>websocket 通信数据结构示例</h3><p><img src="/medias/images/socket.jpg"></p><h5 id="定义系统常量"><a href="#定义系统常量" class="headerlink" title="定义系统常量"></a>定义系统常量</h5><p>constant.js</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> const WS_OPEN <span class="token operator">=</span> <span class="token string">'wsOpen'</span><span class="token builtin class-name">export</span> const SERVICE <span class="token operator">=</span> <span class="token string">'service'</span> // 服务端，即远程服务非本体机器<span class="token builtin class-name">export</span> const TERMINAL <span class="token operator">=</span> <span class="token string">'terminal'</span> // 终端， 即本体底盘<span class="token builtin class-name">export</span> const WS_MSG_SERVICE <span class="token operator">=</span> <span class="token string">'wsMsgService'</span> // 服务端回调消息<span class="token builtin class-name">export</span> const WS_MSG_TERMINAL <span class="token operator">=</span> <span class="token string">'wsMsgTerminal'</span> // 终端回调消息<span class="token builtin class-name">export</span> const TIME_OUT <span class="token operator">=</span> <span class="token string">'timeOut'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义websocket配置"><a href="#定义websocket配置" class="headerlink" title="定义websocket配置"></a>定义websocket配置</h5><p>websockt 实体，地址，超时变量配置，以及启动全局注册配置(机器人底盘通信需要先进行注册)</p><p>websocket.js:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span> TERMINAL <span class="token punctuation">}</span> from <span class="token string">'@/constant'</span><span class="token function">import</span> <span class="token punctuation">{</span> getTerminalWsUrl <span class="token punctuation">}</span> from <span class="token string">'@/utils/socket'</span>const timer <span class="token operator">=</span> <span class="token punctuation">{</span>  wsInterval: null,  wsTimeout: null<span class="token punctuation">}</span>// 启动全局注册const advertise <span class="token operator">=</span> <span class="token punctuation">{</span>  op: <span class="token string">'advertise'</span>,  id: <span class="token string">'velocity_control'</span>,  topic: <span class="token string">'/cmd_vel_mux/input/teleop'</span>,  type: <span class="token string">'geometry_msgs/Twist'</span><span class="token punctuation">}</span>const socketWs <span class="token operator">=</span> <span class="token punctuation">{</span>  // <span class="token punctuation">[</span>SERVICE<span class="token punctuation">]</span>: <span class="token punctuation">{</span>  //   ws: null,  //   url: ,  //   <span class="token punctuation">..</span>.timer,  //   outlierDatas: <span class="token punctuation">{</span><span class="token punctuation">}</span>, // 异常重新拉取数据数据  //   globalSendDatas: <span class="token punctuation">[</span><span class="token punctuation">]</span> // 全局请求数据  // <span class="token punctuation">}</span>,  <span class="token punctuation">[</span>TERMINAL<span class="token punctuation">]</span>: <span class="token punctuation">{</span>    ws: null,    url: getTerminalWsUrl<span class="token punctuation">(</span><span class="token punctuation">)</span>,    <span class="token punctuation">..</span>.timer,    outlierDatas: <span class="token punctuation">{</span><span class="token punctuation">}</span>, // 异常数据    globalSendDatas: <span class="token punctuation">[</span>advertise<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">export</span> <span class="token keyword">function</span> setWS <span class="token punctuation">(</span>key, socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.socketWs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> socket<span class="token punctuation">}</span><span class="token builtin class-name">export</span> <span class="token keyword">function</span> setWsIntervalTimer <span class="token punctuation">(</span>key, wsInterval<span class="token punctuation">)</span> <span class="token punctuation">{</span>  socketWs<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.wsInterval <span class="token operator">=</span> wsInterval<span class="token punctuation">}</span><span class="token builtin class-name">export</span> <span class="token keyword">function</span> setWsTimeoutTimer <span class="token punctuation">(</span>key, wsTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>  socketWs<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.wsTimeout <span class="token operator">=</span> wsTimeout<span class="token punctuation">}</span><span class="token builtin class-name">export</span> const sendIdsInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token builtin class-name">export</span> default socketWs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据系统环境变量, 获取连接的ip地址，socket.js:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span> getNetStaus <span class="token punctuation">}</span> from <span class="token string">'@/utils'</span>// 获取终端连接地址<span class="token builtin class-name">export</span> <span class="token keyword">function</span> <span class="token function-name function">getTerminalWsUrl</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  const nodeEnv <span class="token operator">=</span> process.env.NODE_ENV  <span class="token builtin class-name">let</span> wsUrl <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeEnv <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    const ips <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'10.42.0.1'</span>, // wifi      <span class="token string">'192.168.20.22'</span>, // 有线      <span class="token string">'127.0.0.1'</span> // 本体    <span class="token punctuation">]</span>    const PORT <span class="token operator">=</span> <span class="token number">9090</span> // 端口号    const url <span class="token operator">=</span> window.location.host.split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span><span class="token operator">=</span> ips<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      wsUrl <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>ws://$<span class="token punctuation">{</span>url<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>PORT<span class="token punctuation">}</span><span class="token variable">`</span></span>      <span class="token builtin class-name">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ips.indexOf<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">&gt;</span> -1<span class="token punctuation">)</span> <span class="token punctuation">{</span>      wsUrl <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>ws://$<span class="token punctuation">{</span>url<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>PORT<span class="token punctuation">}</span><span class="token variable">`</span></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>getNetStaus<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'wifi'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      wsUrl <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>ws://$<span class="token punctuation">{</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>:$<span class="token punctuation">{</span>PORT<span class="token punctuation">}</span><span class="token variable">`</span></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      wsUrl <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>ws://$<span class="token punctuation">{</span>ips<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>:$<span class="token punctuation">{</span>PORT<span class="token punctuation">}</span><span class="token variable">`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    /**     * ws://101.33.210.195:9099 <span class="token punctuation">(</span>网线稳定<span class="token punctuation">)</span>     * ws://101.33.210.195:9090 <span class="token punctuation">(</span>WIFI备用<span class="token punctuation">)</span>     */    wsUrl <span class="token operator">=</span> <span class="token string">'ws://101.33.210.195:9090'</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> wsUrl<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义hook-抽离系统websoket创建逻辑"><a href="#定义hook-抽离系统websoket创建逻辑" class="headerlink" title="定义hook, 抽离系统websoket创建逻辑"></a>定义hook, 抽离系统websoket创建逻辑</h5><p>创建WebSocket，进行连接状态回调处理，心跳检测及重新连接，ws.js</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> from <span class="token string">'vue'</span><span class="token function">import</span> <span class="token punctuation">{</span> toStringfy <span class="token punctuation">}</span> from <span class="token string">'@/utils'</span><span class="token function">import</span> websocket, <span class="token punctuation">{</span> sendIdsInfo <span class="token punctuation">}</span> from <span class="token string">'@/websocket'</span><span class="token function">import</span> useSocket from <span class="token string">'@/use/socket'</span><span class="token function">import</span> EventBus from <span class="token string">'@/utils/eventBus'</span><span class="token function">import</span> <span class="token punctuation">{</span>  SERVICE,  TERMINAL,  WS_OPEN,  WS_MSG_SERVICE,  WS_MSG_TERMINAL<span class="token punctuation">}</span> from <span class="token string">'@/constant'</span><span class="token builtin class-name">export</span> default <span class="token keyword">function</span> <span class="token function-name function">usews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  const eventBus <span class="token operator">=</span> new EventBus<span class="token punctuation">(</span><span class="token punctuation">)</span>  provide<span class="token punctuation">(</span><span class="token string">'eventBus'</span>, eventBus<span class="token punctuation">)</span>  // 重连timer  const reconnectTimerObj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>TERMINAL<span class="token punctuation">]</span>: null,    <span class="token punctuation">[</span>SERVICE<span class="token punctuation">]</span>: null  <span class="token punctuation">}</span>  // 心跳检测timer  const starthbTimerObj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>TERMINAL<span class="token punctuation">]</span>: null,    <span class="token punctuation">[</span>SERVICE<span class="token punctuation">]</span>: null  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> websocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    initWebscoket<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  // 心跳检测  <span class="token keyword">function</span> startWsHeartbeat<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    starthbTimerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> clearInterval<span class="token punctuation">(</span>starthbTimerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    starthbTimerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> setInterval<span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {      if <span class="token punctuation">(</span>websocket[key].ws.readyState <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> {        starthbTimerObj[key] <span class="token operator">&amp;&amp;</span> clearInterval<span class="token punctuation">(</span>starthbTimerObj[key]<span class="token punctuation">)</span>        starthbTimerObj[key] <span class="token operator">=</span> null        websocket[key].ws.close<span class="token punctuation">(</span><span class="token punctuation">)</span>      } else {      }    }<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>  }  <span class="token operator">/</span><span class="token operator">/</span> 初始化连接  function initWebscoket<span class="token punctuation">(</span>key<span class="token punctuation">)</span> {    websocket[key].ws <span class="token operator">=</span> new WebSocket<span class="token punctuation">(</span>websocket[key].url<span class="token punctuation">)</span>    websocket[key].ws.onopen <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {      websocketopen<span class="token punctuation">(</span>key<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    }    websocket[key].ws.onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {      websocketonmessage<span class="token punctuation">(</span>key<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    }    websocket[key].ws.onclose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {      websocketonclose<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    }  }  const { wsSend } <span class="token operator">=</span> useSocket<span class="token punctuation">(</span>false<span class="token punctuation">)</span>  function websocketopen<span class="token punctuation">(</span>key<span class="token punctuation">,</span> wsRes<span class="token punctuation">)</span> {    console.log<span class="token punctuation">(</span>key<span class="token punctuation">,</span> '<span class="token operator">:</span>websocket连接成功'<span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span> 开启心跳    startWsHeartbeat<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    eventBus.$emit<span class="token punctuation">(</span>key<span class="token punctuation">,</span> WS_OPEN<span class="token punctuation">)</span>    reconnectTimerObj[key] <span class="token operator">&amp;&amp;</span> clearInterval<span class="token punctuation">(</span>reconnectTimerObj[key]<span class="token punctuation">)</span>    reconnectTimerObj[key] <span class="token operator">=</span> null    <span class="token operator">/</span><span class="token operator">/</span> 重新请求    const _OutlierDatas <span class="token operator">=</span> websocket[key].outlierDatas    for <span class="token punctuation">(</span>const outKey in _OutlierDatas<span class="token punctuation">)</span> {      <span class="token operator">/</span><span class="token operator">/</span> console.log<span class="token punctuation">(</span>_OutlierDatas[key]<span class="token punctuation">)</span>      if <span class="token punctuation">(</span>_OutlierDatas[outKey]<span class="token punctuation">)</span> {        const { data<span class="token punctuation">,</span> options } <span class="token operator">=</span> _OutlierDatas[outKey]        wsSend<span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span>      }    }    <span class="token operator">/</span><span class="token operator">/</span> 全局请求，即启动全局注册    websocket[key].globalSendDatas.forEach<span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">&gt;</span> {      <span class="token operator">/</span><span class="token operator">/</span> data <span class="token operator">=</span> toString<span class="token punctuation">(</span>data<span class="token punctuation">)</span>      websocket[key].ws.send<span class="token punctuation">(</span>toStringfy<span class="token punctuation">(</span>data<span class="token punctuation">))</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> websocketonmessage<span class="token punctuation">(</span>key, wsRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">let</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> wsRes    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> typeof data <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span><span class="token operator">=</span> SERVICE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventBus.<span class="token variable">$emit</span><span class="token punctuation">(</span>WS_MSG_SERVICE, data, key<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span><span class="token operator">=</span> TERMINAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventBus.<span class="token variable">$emit</span><span class="token punctuation">(</span>WS_MSG_TERMINAL, data, key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    const <span class="token punctuation">{</span> <span class="token function">id</span> <span class="token punctuation">}</span> <span class="token operator">=</span> data    <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> sendIdsInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span><span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.hasData <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>data        sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.success <span class="token operator">&amp;&amp;</span> sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.success<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer <span class="token operator">&amp;&amp;</span> clearTimeout<span class="token punctuation">(</span>sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer<span class="token punctuation">)</span>        sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.hasData <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> websocketonclose<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>key, <span class="token string">'_关闭了'</span><span class="token punctuation">)</span>    // 关闭后触发重连    const reconnect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>      initWebscoket<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reconnectTimerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>      reconnectTimerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> setInterval<span class="token punctuation">(</span>reconnect, <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义hook-抽离系统websoket系统消息交互逻辑"><a href="#定义hook-抽离系统websoket系统消息交互逻辑" class="headerlink" title="定义hook, 抽离系统websoket系统消息交互逻辑"></a>定义hook, 抽离系统websoket系统消息交互逻辑</h5><p>主要进行接口的调用，进行回调返回，socket.js:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span> inject, onBeforeUnmount <span class="token punctuation">}</span> from <span class="token string">'vue'</span><span class="token function">import</span> <span class="token punctuation">{</span> toStringfy, toObj <span class="token punctuation">}</span> from <span class="token string">'@/utils'</span><span class="token function">import</span> websocket, <span class="token punctuation">{</span> sendIdsInfo <span class="token punctuation">}</span> from <span class="token string">'@/websocket'</span><span class="token function">import</span> <span class="token punctuation">{</span>  SERVICE,  TERMINAL,  WS_MSG_SERVICE,  WS_MSG_TERMINAL<span class="token punctuation">}</span> from <span class="token string">'@/constant'</span><span class="token builtin class-name">let</span> wsfuncs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin class-name">export</span> default <span class="token keyword">function</span> useSocket<span class="token punctuation">(</span>flage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  const defaultTimeout <span class="token operator">=</span> <span class="token number">15000</span>  const eventBus <span class="token operator">=</span> inject<span class="token punctuation">(</span><span class="token string">'eventBus'</span><span class="token punctuation">)</span>  // 发送信息  const sendInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> wsSend<span class="token punctuation">(</span>key, data, options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> toObj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token builtin class-name">let</span> <span class="token function">timeout</span> <span class="token operator">=</span> options?.timeout    const newCheckTimeOut <span class="token operator">=</span> <span class="token function">timeout</span> ? <span class="token boolean">true</span> <span class="token builtin class-name">:</span> <span class="token operator">!</span><span class="token operator">!</span>options?.newCheckTimeOut    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCheckTimeOut <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">timeout</span> <span class="token operator">=</span> defaultTimeout    <span class="token punctuation">}</span>    sendInfo<span class="token punctuation">[</span>data.id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> data, options, <span class="token function">timeout</span> <span class="token punctuation">}</span>    const timer <span class="token operator">=</span> setInterval<span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {      if <span class="token punctuation">(</span>websocket[key].ws.readyState <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> {        <span class="token operator">/</span><span class="token operator">/</span> 当没有当前id信息，必须存储一个        if <span class="token punctuation">(</span><span class="token operator">!</span>sendIdsInfo[data.id]<span class="token punctuation">)</span> {          sendIdsInfo[data.id] <span class="token operator">=</span> {}        }        sendIdsInfo[data.id].newCheckTimeOut <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>newCheckTimeOut        sendIdsInfo[data.id].delay <span class="token operator">=</span> timeout        if <span class="token punctuation">(</span>typeof data <span class="token operator">==</span><span class="token operator">=</span> 'object' <span class="token operator">&amp;&amp;</span> data.id<span class="token punctuation">)</span> {          if <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> typeof options <span class="token operator">==</span><span class="token operator">=</span> 'object'<span class="token punctuation">)</span> {            const { success<span class="token punctuation">,</span> error } <span class="token operator">=</span> options            sendIdsInfo[data.id].success <span class="token operator">=</span> success            sendIdsInfo[data.id].error <span class="token operator">=</span> error          }        }        newCheckTimeOut <span class="token operator">&amp;&amp;</span> checkoutMsgTimeOut<span class="token punctuation">(</span>data.id<span class="token punctuation">,</span> null<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>        timer <span class="token operator">&amp;&amp;</span> clearInterval<span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        websocket[key].ws.send<span class="token punctuation">(</span>toStringfy<span class="token punctuation">(</span>data<span class="token punctuation">))</span></span>        websocket<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.outlierDatas<span class="token punctuation">[</span>data.id<span class="token punctuation">]</span> <span class="token operator">=</span> sendInfo<span class="token punctuation">[</span>data.id<span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>websocket<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.ws.readyState <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer <span class="token operator">&amp;&amp;</span> clearInterval<span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        websocket<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.outlierDatas<span class="token punctuation">[</span>data.id<span class="token punctuation">]</span> <span class="token operator">=</span> sendInfo<span class="token punctuation">[</span>data.id<span class="token punctuation">]</span>        console.log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>ws_$<span class="token punctuation">{</span>key<span class="token punctuation">}</span>连接异常<span class="token variable">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      // <span class="token keyword">else</span> <span class="token punctuation">{</span>      //   console.log<span class="token punctuation">(</span><span class="token string">'+++++++++++++状态处理中+++++++++++++++'</span><span class="token punctuation">)</span>      // <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  /**   *   * @param <span class="token punctuation">{</span>*<span class="token punctuation">}</span> data   * @param <span class="token punctuation">{</span>success: function, error: function, newCheckTimeOut: <span class="token punctuation">{</span>type:bolean, default: false<span class="token punctuation">}</span><span class="token punctuation">}</span> cbs   */  <span class="token keyword">function</span> wsServiceSend<span class="token punctuation">(</span>data, options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // const <span class="token punctuation">{</span> success, error <span class="token punctuation">}</span> <span class="token operator">=</span> cbs    wsSend<span class="token punctuation">(</span>SERVICE, data, options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  /**   *   * @param <span class="token punctuation">{</span>*<span class="token punctuation">}</span> data   * @param <span class="token punctuation">{</span>success: function, error: function, newCheckTimeOut: <span class="token punctuation">{</span>type:bolean, default: false<span class="token punctuation">}</span><span class="token punctuation">}</span> cbs   */  <span class="token keyword">function</span> wsTermainalSend<span class="token punctuation">(</span>data, options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // const <span class="token punctuation">{</span> success, error <span class="token punctuation">}</span> <span class="token operator">=</span> cbs    wsSend<span class="token punctuation">(</span>TERMINAL, data, options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  // 超时内容  const timerObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  // 每个组件的回调  const _cbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  // 接收信息  <span class="token keyword">function</span> wsOnMessage<span class="token punctuation">(</span>key, cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wsfuncs.push<span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    _cbs.push<span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    eventBus <span class="token operator">&amp;&amp;</span> eventBus.<span class="token variable">$on</span><span class="token punctuation">(</span>key, wsRes <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>      wsfuncs.forEach<span class="token punctuation">(</span>fun <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wsRes <span class="token operator">&amp;&amp;</span> typeof wsRes <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          fun <span class="token operator">&amp;&amp;</span> fun<span class="token punctuation">(</span>wsRes<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> timerObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        const <span class="token punctuation">{</span> <span class="token builtin class-name">type</span> <span class="token punctuation">}</span> <span class="token operator">=</span> timerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.type        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> wsRes<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          timerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.hasData <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>, <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  // 检测消息是否超时  <span class="token keyword">function</span> checkoutMsgTimeOut<span class="token punctuation">(</span>id, cb, delay <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof <span class="token function">id</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      const params <span class="token operator">=</span> <span class="token function">id</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> type: key, timer: null, hasData: <span class="token boolean">false</span> <span class="token punctuation">}</span>        timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.timer <span class="token operator">&amp;&amp;</span> clearTimeout<span class="token punctuation">(</span>timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.timer<span class="token punctuation">)</span>        timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.timer <span class="token operator">=</span> setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.hasData<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.timer <span class="token operator">&amp;&amp;</span> clearTimeout<span class="token punctuation">(</span>timerObj<span class="token punctuation">[</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>.timer<span class="token punctuation">)</span>            cb <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>, delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token builtin class-name">return</span>    <span class="token punctuation">}</span>    sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span>.timer <span class="token operator">=</span> setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span>.hasData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span>.error <span class="token operator">&amp;&amp;</span> sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span>.error<span class="token punctuation">(</span><span class="token punctuation">{</span> type: <span class="token string">'timeout'</span>, msg: <span class="token string">'请求超时了'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      sendIdsInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span>.hasData <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>, delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  // 服务端消息监听  <span class="token keyword">function</span> wsServiceOnMsg<span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wsOnMessage<span class="token punctuation">(</span>WS_MSG_SERVICE, cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  // 终端消息监听  <span class="token keyword">function</span> wsTermainalOnMsg<span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wsOnMessage<span class="token punctuation">(</span>WS_MSG_TERMINAL, cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  onBeforeUnmount<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flage<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventBus.<span class="token variable">$off</span><span class="token punctuation">(</span>SERVICE<span class="token punctuation">)</span>      eventBus.<span class="token variable">$off</span><span class="token punctuation">(</span>TERMINAL<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wsfuncs <span class="token operator">=</span> wsfuncs.filter<span class="token punctuation">(</span>fun <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> _cbs.indexOf<span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> -1    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> sendInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer <span class="token operator">&amp;&amp;</span> clearTimeout<span class="token punctuation">(</span>sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer<span class="token punctuation">)</span>        delete sendIdsInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> timerObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      timerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer <span class="token operator">&amp;&amp;</span> clearTimeout<span class="token punctuation">(</span>timerObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.timer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>    wsSend,    wsServiceSend,    wsTermainalSend,    wsServiceOnMsg,    wsTermainalOnMsg,    checkoutMsgTimeOut  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目中使用封装好的hook, 示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 获取机器人坐标  <span class="token keyword">function</span> getRobotPose<span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span>    <span class="token punctuation">}</span>    const actions <span class="token operator">=</span> <span class="token punctuation">{</span>      op: <span class="token string">'subscribe'</span>,      id: <span class="token string">'get_pose'</span>,      topic: <span class="token string">'/robot_pose'</span>,      type: <span class="token string">'geometry_msgs/Pose2D'</span>,      throttle_rate: <span class="token number">100</span>    <span class="token punctuation">}</span>    wsTermainalSend<span class="token punctuation">(</span>actions<span class="token punctuation">)</span>    wsTermainalOnMsg<span class="token punctuation">((</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>      const <span class="token punctuation">{</span> topic <span class="token punctuation">}</span> <span class="token operator">=</span> res      <span class="token keyword">if</span> <span class="token punctuation">(</span>topic <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'/robot_pose'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cb <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  getRobotPose<span class="token punctuation">(</span>function<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    const <span class="token punctuation">{</span> msg: <span class="token punctuation">{</span> x, y, theta <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> res    robotPose.xRP <span class="token operator">=</span> x    robotPose.yRP <span class="token operator">=</span> y    robotPose.heading <span class="token operator">=</span> theta  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>从两张图片可以看到，最大的区别是调度的地方。虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布/订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。</p></li><li><p>两种模式都可以用于松散耦合，改进代码管理和潜在的复用。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式与发布/订阅模式区别</title>
      <link href="/2022/01/19/blog7/"/>
      <url>/2022/01/19/blog7/</url>
      
        <content type="html"><![CDATA[<p>在学习设计模式的时候，观察者（Observer）模式和发布（Publish）/订阅（Subscribe）模式在概念上存在一定的相似度，而两者之间其实是存在差异的，本质上的区别就是调度的地方不同。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>比较概念的解释是，目标和观察者是基类，目标提供维护观察者的一系列方法，观察者提供更新接口。具体观察者和具体目标继承各自的基类，然后具体观察者把自己注册到具体目标里，在具体目标发生变化时候，调度观察者的更新方法。</p><p>比如有个“天气中心”的具体目标A，专门监听天气变化，而有个显示天气的界面的观察者B，B就把自己注册到A里，当A触发天气变化，就调度B的更新方法，并带上自己的上下文。</p><p><img src="/medias/images/observe.jpg"></p><h5 id="观察者模式实现代码"><a href="#观察者模式实现代码" class="headerlink" title="观察者模式实现代码"></a>观察者模式实现代码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//观察者列表<span class="token keyword">function</span> <span class="token function-name function">ObserverList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  this.observerList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ObserverList.prototype.add <span class="token operator">=</span> function<span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> this.observerList.push<span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ObserverList.prototype.count <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> this.observerList.length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ObserverList.prototype.get <span class="token operator">=</span> function<span class="token punctuation">(</span> index <span class="token punctuation">)</span><span class="token punctuation">{</span>  if<span class="token punctuation">(</span> index <span class="token operator">&gt;</span> -1 <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> this.observerList.length <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> this.observerList<span class="token punctuation">[</span> index <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ObserverList.prototype.indexOf <span class="token operator">=</span> function<span class="token punctuation">(</span> obj, startIndex <span class="token punctuation">)</span><span class="token punctuation">{</span>  var i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span>  while<span class="token punctuation">(</span> i <span class="token operator">&lt;</span> this.observerList.length <span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span> this.observerList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> obj <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i++<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ObserverList.prototype.removeAt <span class="token operator">=</span> function<span class="token punctuation">(</span> index <span class="token punctuation">)</span><span class="token punctuation">{</span>  this.observerList.splice<span class="token punctuation">(</span> index, <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>//目标<span class="token keyword">function</span> <span class="token function-name function">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  this.observers <span class="token operator">=</span> new ObserverList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Subject.prototype.addObserver <span class="token operator">=</span> function<span class="token punctuation">(</span> observer <span class="token punctuation">)</span><span class="token punctuation">{</span>  this.observers.add<span class="token punctuation">(</span> observer <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Subject.prototype.removeObserver <span class="token operator">=</span> function<span class="token punctuation">(</span> observer <span class="token punctuation">)</span><span class="token punctuation">{</span>  this.observers.removeAt<span class="token punctuation">(</span> this.observers.indexOf<span class="token punctuation">(</span> observer, <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Subject.prototype.notify <span class="token operator">=</span> function<span class="token punctuation">(</span> context <span class="token punctuation">)</span><span class="token punctuation">{</span>  var observerCount <span class="token operator">=</span> this.observers.count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  for<span class="token punctuation">(</span>var <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> observerCount<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.observers.get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>.update<span class="token punctuation">(</span> context <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>//观察者<span class="token keyword">function</span> <span class="token function-name function">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  this.update <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    // <span class="token punctuation">..</span>.  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h3><p>比较概念的解释是，订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心（顺带上下文），由调度中心统一调度订阅者注册到调度中心的处理代码。</p><p>比如有个界面是实时显示天气，它就订阅天气事件（注册到调度中心，包括处理程序），当天气变化时（定时获取数据），就作为发布者发布天气信息到调度中心，调度中心就调度订阅者的天气处理程序。</p><p><img src="/medias/images/subscribe.jpg"></p><h5 id="发布-订阅模式实现代码"><a href="#发布-订阅模式实现代码" class="headerlink" title="发布/订阅模式实现代码"></a>发布/订阅模式实现代码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var pubsub <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span>function<span class="token punctuation">(</span>myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // Storage <span class="token keyword">for</span> topics that can be broadcast    // or listened to    var topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    // An topic identifier    var subUid <span class="token operator">=</span> -1<span class="token punctuation">;</span>    // Publish or broadcast events of interest    // with a specific topic name and arguments    // such as the data to pass along    myObject.publish <span class="token operator">=</span> function<span class="token punctuation">(</span> topic, args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        var subscribers <span class="token operator">=</span> topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>,            len <span class="token operator">=</span> subscribers ? subscribers.length <span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>len--<span class="token punctuation">)</span> <span class="token punctuation">{</span>            subscribers<span class="token punctuation">[</span>len<span class="token punctuation">]</span>.func<span class="token punctuation">(</span> topic, args <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> this<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    // Subscribe to events of interest    // with a specific topic name and a    // callback function, to be executed    // when the topic/event is observed    myObject.subscribe <span class="token operator">=</span> function<span class="token punctuation">(</span> topic, func <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        var token <span class="token operator">=</span> <span class="token punctuation">(</span> ++subUid <span class="token punctuation">)</span>.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>.push<span class="token punctuation">(</span><span class="token punctuation">{</span>            token: token,            func: func        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    // Unsubscribe from a specific    // topic, based on a tokenized reference    // to the subscription    myObject.unsubscribe <span class="token operator">=</span> function<span class="token punctuation">(</span> token <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> var m <span class="token keyword">in</span> topics <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> topics<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span> var i <span class="token operator">=</span> <span class="token number">0</span>, j <span class="token operator">=</span> topics<span class="token punctuation">[</span>m<span class="token punctuation">]</span>.length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> topics<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>.token <span class="token operator">==</span><span class="token operator">=</span> token <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        topics<span class="token punctuation">[</span>m<span class="token punctuation">]</span>.splice<span class="token punctuation">(</span> i, <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token builtin class-name">return</span> token<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> this<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span> pubsub <span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>从两张图片可以看到，最大的区别是调度的地方。虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布/订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。</p></li><li><p>两种模式都可以用于松散耦合，改进代码管理和潜在的复用。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码中if-else的优化</title>
      <link href="/2022/01/10/blog6/"/>
      <url>/2022/01/10/blog6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有时候当业务比较多的时候，代码中会充斥着条件判断语句，简单粗暴的判断，特别是在增量越大的情况下，会让程序的复杂度越来越高，而且代码的可读性也会比较差。这篇文章就是对此类情况的优化，试着进行代码重构。</p><h3 id="场景一：根据-status-显示对应名称"><a href="#场景一：根据-status-显示对应名称" class="headerlink" title="场景一：根据 status 显示对应名称"></a>场景一：根据 status 显示对应名称</h3><h5 id="优化方案-1：object-对象"><a href="#优化方案-1：object-对象" class="headerlink" title="优化方案 1：object 对象"></a>优化方案 1：object 对象</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const statusStr <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'1'</span><span class="token builtin class-name">:</span> <span class="token string">'待付款'</span>,  <span class="token string">'2'</span><span class="token builtin class-name">:</span> <span class="token string">'待发货'</span>,  <span class="token string">'3'</span><span class="token builtin class-name">:</span> <span class="token string">'已发货'</span>,  <span class="token string">'4'</span><span class="token builtin class-name">:</span> <span class="token string">'交易完成'</span>,  <span class="token string">'5'</span><span class="token builtin class-name">:</span> <span class="token string">'交易关闭'</span>,  <span class="token string">'default'</span><span class="token builtin class-name">:</span> <span class="token string">''</span><span class="token punctuation">}</span>const getStatus <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> statusStr<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> statusStr<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将判断条件作为对象的属性名，将处理逻辑作为对象的属性值，在按钮点击的时候，通过对象属性查找的方式来进行逻辑判断。</p><h5 id="优化方案-2-Map-对象"><a href="#优化方案-2-Map-对象" class="headerlink" title="优化方案 2: Map 对象"></a>优化方案 2: Map 对象</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const statusStr <span class="token operator">=</span> new Map<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'待付款'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'待发货'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'3'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'已发货'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'4'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'交易完成'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'5'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'待付款'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'待付款'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>,<span class="token punctuation">]</span><span class="token punctuation">)</span>const getStatus <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  const actions <span class="token operator">=</span> statusStr.get<span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">||</span> statusStr.get<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>  <span class="token builtin class-name">return</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写用到了 es6 里的 Map 对象，那么 Map 对象和 Object 对象有什么区别呢？</p><p>一个对象通常都有自己的原型，所以一个对象总有一个”prototype”键。 一个对象的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。 你可以通过 size 属性很容易地得到一个 Map 的键值对个数，而对象的键值对个数只能手动确认。</p><h3 id="场景二：多个-condition-对应名称"><a href="#场景二：多个-condition-对应名称" class="headerlink" title="场景二：多个 condition 对应名称"></a>场景二：多个 condition 对应名称</h3><p>现在把问题升级一下， 以前按钮点击时候只需要判断 status，现在还需要判断用户的身份，举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const onButtionClick <span class="token operator">=</span> <span class="token punctuation">(</span>status, identity<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'guest'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    if<span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'master'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    if<span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      // <span class="token keyword">do</span> sth    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子我们可以看到，当你的逻辑升级为二元判断时，你的判断量会加倍，你的代码量也会加倍，这时怎么写更清爽呢</p><h5 id="优化方案-1：将-condition-用字符拼接形式存在-Map-对象里"><a href="#优化方案-1：将-condition-用字符拼接形式存在-Map-对象里" class="headerlink" title="优化方案 1：将 condition 用字符拼接形式存在 Map 对象里"></a>优化方案 1：将 condition 用字符拼接形式存在 Map 对象里</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const actions <span class="token operator">=</span> new Map<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'guest_1'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'guest_2'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'guest_3'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'guest_4'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'guest_5'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'master_1'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'master_2'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'master_3'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'master_4'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'master_5'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token string">'default'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>const onButtionClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity, status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  const action <span class="token operator">=</span> actions.get<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>identity<span class="token punctuation">}</span>_$<span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> actions.get<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>  action<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码核心逻辑是：把两个条件拼接成字符串，并通过以条件拼接字符串作为键，以处理函数作为值的 Map 对象进行查找并执行，这种写法在多元条件判断时候尤其好用。</p><h5 id="优化方案-2：-将-condition-用字符拼接形式存在-Object-对象里"><a href="#优化方案-2：-将-condition-用字符拼接形式存在-Object-对象里" class="headerlink" title="优化方案 2： 将 condition 用字符拼接形式存在 Object 对象里"></a>优化方案 2： 将 condition 用字符拼接形式存在 Object 对象里</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'guest_1'</span><span class="token builtin class-name">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span>,  <span class="token string">'guest_2'</span><span class="token builtin class-name">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span>,  ……<span class="token punctuation">}</span>const onButtionClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity, status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  const action <span class="token operator">=</span> actions<span class="token punctuation">[</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>identity<span class="token punctuation">}</span>_$<span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span>  action<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化方案-3：将-condition-用-Object-对象形式存在-Map-对象里"><a href="#优化方案-3：将-condition-用-Object-对象形式存在-Map-对象里" class="headerlink" title="优化方案 3：将 condition 用 Object 对象形式存在 Map 对象里"></a>优化方案 3：将 condition 用 Object 对象形式存在 Map 对象里</h5><p>可能用查询条件拼成字符串有点别扭，那还有一种方案，就是用 Map 对象，以 Object 对象作为 key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const actions <span class="token operator">=</span> new Map<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token punctuation">{</span> identity: <span class="token string">'guest'</span>, status: <span class="token number">1</span> <span class="token punctuation">}</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token punctuation">[</span><span class="token punctuation">{</span> identity: <span class="token string">'guest'</span>, status: <span class="token number">2</span> <span class="token punctuation">}</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span> /* <span class="token keyword">do</span> sth */ <span class="token punctuation">}</span><span class="token punctuation">]</span>,  ……<span class="token punctuation">]</span><span class="token punctuation">)</span>const onButtionClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity, status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  const action <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.actions<span class="token punctuation">]</span>.filter<span class="token variable"><span class="token punctuation">((</span>[key<span class="token punctuation">,</span>value]<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>key.identity <span class="token operator">==</span><span class="token operator">=</span> identity <span class="token operator">&amp;&amp;</span> key.status <span class="token operator">==</span><span class="token operator">=</span> status<span class="token punctuation">))</span></span>  action.forEach<span class="token variable"><span class="token punctuation">((</span>[key<span class="token punctuation">,</span>value]<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span>value<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景三：根据-status-做出相应操作"><a href="#场景三：根据-status-做出相应操作" class="headerlink" title="场景三：根据 status 做出相应操作"></a>场景三：根据 status 做出相应操作</h3><p>举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/*   rderType: 订单类型，1.500元定金用户，2.200元定金用户，3.普通用户  pay: 是否已支付 true/false <span class="token punctuation">(</span>已下单但未支付用户需进入普通购买模式<span class="token punctuation">)</span>  stock: 产品库存，已支付定金用户不受限 */const handlerOrder <span class="token operator">=</span> <span class="token punctuation">(</span> orderType, pay, stock <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>oderType <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pay <span class="token operator">==</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> // 已支付定金      console.log<span class="token punctuation">(</span> <span class="token string">'500元定金预购, 得到100优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      if<span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> <span class="token string">'普通购买, 无优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> <span class="token string">'手机库存不足'</span> <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oderType <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pay <span class="token operator">==</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> // 已支付定金      console.log<span class="token punctuation">(</span> <span class="token string">'200元定金预购, 得到100优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      if<span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> <span class="token string">'普通购买, 无优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> <span class="token string">'手机库存不足'</span> <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oderType <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> stock <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span> <span class="token string">'普通购买, 无优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span> <span class="token string">'手机库存不足'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  handleOrder<span class="token punctuation">(</span> <span class="token number">1</span> , true, <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出： <span class="token number">500</span>元定金预购, 得到100优惠券<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化方案-1：职责链模式"><a href="#优化方案-1：职责链模式" class="headerlink" title="优化方案 1：职责链模式"></a>优化方案 1：职责链模式</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const order500 <span class="token operator">=</span> <span class="token punctuation">(</span>oderType, pay, stock<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>oderType <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> pay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span> <span class="token string">'500元定金预购, 得到100优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    order200<span class="token punctuation">(</span>oderType, pay, stock<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const order200 <span class="token operator">=</span> <span class="token punctuation">(</span>oderType, pay, stock<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>oderType <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> pay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span> <span class="token string">'200元定金预购, 得到100优惠券'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    orderNormal<span class="token punctuation">(</span>oderType, pay, stock<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const orderNormal <span class="token operator">=</span> <span class="token punctuation">(</span>oderType, pay, stock<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token string">'普通购买, 无优惠券'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token string">'手机库存不足'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>order500<span class="token punctuation">(</span> <span class="token number">1</span> , true, <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出： <span class="token number">500</span>元定金预购, 得到100优惠券<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips：职责链模式的定义是使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><h3 id="场景四：根据范围去进行不同处理"><a href="#场景四：根据范围去进行不同处理" class="headerlink" title="场景四：根据范围去进行不同处理"></a>场景四：根据范围去进行不同处理</h3><p>举个例子：比如某平台的信用分数评级，超过 700-950，就是信用极好，650-700 信用优秀，600-650 信用良好，550-600 信用中等，350-550 信用较差。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">showGrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> _level <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span>grace <span class="token operator">&gt;=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _level <span class="token operator">=</span> <span class="token string">'信用极好'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grace <span class="token operator">&gt;=</span> <span class="token number">650</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _level <span class="token operator">=</span> <span class="token string">'信用优秀'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grace<span class="token operator">&gt;=</span><span class="token number">600</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _level <span class="token operator">=</span> <span class="token string">'信用良好'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>race<span class="token operator">&gt;=</span><span class="token number">550</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _level <span class="token operator">=</span> <span class="token string">'信用中等'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    _level <span class="token operator">=</span> <span class="token string">'信用较差'</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> _level<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化方案-1：用-look-up-表，把配置数据和业务逻辑分离"><a href="#优化方案-1：用-look-up-表，把配置数据和业务逻辑分离" class="headerlink" title="优化方案 1：用 look-up 表，把配置数据和业务逻辑分离"></a>优化方案 1：用 look-up 表，把配置数据和业务逻辑分离</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> showGrace<span class="token punctuation">(</span>grace,level,levelForGrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>  for<span class="token punctuation">(</span>let <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>level.length<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>grace<span class="token operator">&gt;=</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> levelForGrace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  //如果不存在，那么就是分数很低，返回最后一个  <span class="token builtin class-name">return</span> levelForGrace<span class="token punctuation">[</span>levelForGrace.length-1<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token builtin class-name">let</span> <span class="token assign-left variable">graceForLevel</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">700,650</span>,600,550<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token builtin class-name">let</span> <span class="token assign-left variable">levelText</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'信用极好'</span>,<span class="token string">'信用优秀'</span>,<span class="token string">'信用良好'</span>,<span class="token string">'信用中等'</span>,<span class="token string">'信用较差'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>很多情况下我们都可以使用更灵活的方式去替代if else以及switch， 但也不是所有的if else都需要替代， 视情况而定。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何实现扫码登录功能</title>
      <link href="/2022/01/07/blog5/"/>
      <url>/2022/01/07/blog5/</url>
      
        <content type="html"><![CDATA[<h3 id="扫码登录场景"><a href="#扫码登录场景" class="headerlink" title="扫码登录场景"></a>扫码登录场景</h3><p>扫码登录功能是个常见的功能，在各种网页登录中需要进行扫码登录，只需要通过手机上的app，如微信、淘宝等等，使用扫码功能，扫描网页上的二维码，确认登录，就可以完成网页端登录</p><h3 id="扫码登录分析"><a href="#扫码登录分析" class="headerlink" title="扫码登录分析"></a>扫码登录分析</h3><p>简单的分析一下，扫码登录涉及到三种角色，需要解决的问题有2个。</p><h5 id="三种角色"><a href="#三种角色" class="headerlink" title="三种角色"></a>三种角色</h5><p>很明显，扫码登录当中涉及到的三种角色：PC端、手机端、服务端。</p><p>相关的设计都要围绕这三端来展开，具体的设计其实就是每一端应该完成什么功能？应该怎么实现？端和端应该如何交互？</p><h5 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h5><p>扫码登录本质上是一种特殊的登录认证方式，我们面对的是两个问题：手机端如何完成认证，PC端如何完成登录</p><p>如果用普通的账号密码方式登录认证，PC端通过账号密码完成认证，然后服务端给PC端同步返回token key之类的标识，PC端再次请求服务端，需要携带token key，用于标识和证明自己登录的状态。</p><p>服务端响应的时候，需要对token key进行校验，通过则正常响应；校验不通过，认证失败；或者token过期，PC端需要再次登录认证，获取新的token key。</p><p>现在换成了扫码登录：<br>认证不是通过账号密码了，而是由手机端扫码来完成<br>PC端没法同步获取认证成功之后的凭据，必须用某种方式来让PC端获取认证的凭据。</p><h3 id="扫码登录实现"><a href="#扫码登录实现" class="headerlink" title="扫码登录实现"></a>扫码登录实现</h3><h5 id="手机端如何完成认证"><a href="#手机端如何完成认证" class="headerlink" title="手机端如何完成认证"></a>手机端如何完成认证</h5><h6 id="二维码怎么生成？"><a href="#二维码怎么生成？" class="headerlink" title="二维码怎么生成？"></a>二维码怎么生成？</h6><p>二维码和超市里的条形码类似，超市的条形码实际是一串数字，上面存储了商品的序列号。</p><p>二维码的内容就比较自由，里面不止可以存数字，还可以存任何的字符串。我们可以认为，它就是字符的另外一种表现形式。</p><p>下面我通过一个网站把文字转成了二维码：</p><p>所以，我们手机扫码这个过程，其实是对二维码的解码，获取二维码中包含的数据。</p><p>那么pc端二维码怎么生成呢？</p><p>首先，二维码是展示在我们的PC端，所以生成这个操作应该由PC端去请求服务端，获取相应的数据，再由PC端生成这个二维码。</p><p>二维码包含什么呢？<br>二维码在我们这个场景里面是一个重要的媒介，服务端必须给这个数据生成惟一的标识作为二维码ID，同时还应该设置过期的时间。PC端根据二维码ID等数据生成二维码。</p><p>同时，服务端也应该保存二维码的一些状态：未扫描、已成功、已失效。</p><h6 id="App认证机制"><a href="#App认证机制" class="headerlink" title="App认证机制"></a>App认证机制</h6><p>我们还得认识一下基于APP的移动互联网认证机制。</p><p>首先，手机端一般是不会存储登录密码的，我们我们发现，只有装载APP，第一次登录的时候，才需要进行基于账号密码的登录，之后即使这个清理掉这个应用进程，甚至手机重启，都是不需要再次输入账号密码的，它可以自动登录。</p><p>这背后有一套基于token的认证机制，和PC有些类似，但又有一些不同。</p><p>1、APP登录认证的时候除了账号密码，还有设备信息<br>2、账号密码校验通过，服务端会把账号与设备进行一个绑定，进行持久化的保存，包含了账号ID，设备ID，设备类型等等<br>3、APP每次请求除了携带token key，还需要携带设备信息</p><p>因为移动端的设备具备唯一性，可以为每个客户端生成专属token，这个token也不用过期，所以这就是我们可以一次登录，长久使用的原理。</p><h6 id="手机扫码干了什么"><a href="#手机扫码干了什么" class="headerlink" title="手机扫码干了什么"></a>手机扫码干了什么</h6><p>那这下就清楚了，我们手机扫码干了两件事：</p><p>扫描二维码： 识别PC端展示的二维码，获取二维码ID</p><p>确认登录：手机端通过带认证信息(token key、设备信息)、二维码信息（二维码ID）请求服务端，完成认证过程，确认PC端的登录。</p><h5 id="pc端如何完成登录"><a href="#pc端如何完成登录" class="headerlink" title="pc端如何完成登录"></a>pc端如何完成登录</h5><p>接下来到我们的重头戏了，手机端完成了它的工作，我们服务端的登录怎么进入登录状态呢？</p><p>我们前面讲了，PC端通过token来标识登录状态。那么手机端扫码确认之后，我们的服务端就应该给PC生成相应的token。</p><p>那么，这个PC端又如何获取它所需的token key，来完成登录呢？</p><p>PC端可以通过获取二维码的状态来进行相应的响应：<br>1、二维码未扫描：无操作<br>2、二维码已失效：提示刷新二维码<br>3、二维码已成功：从服务端获取PC token</p><p>获取二维码状态，主要有三种方式：</p><h6 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h6><p>轮询方式是指客户端会每隔一段时间就主动给服务端发送一次二维码状态的查询请求。</p><h6 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h6><p>长轮询是指客户端主动给服务端发送二维码状态的查询请求，服务端会按情况对请求进行阻塞，直至二维码信息更新或超时。当客户端接收到返回结果后，若二维码仍未被扫描，则会继续发送查询请求，直至状态变化（已失效或已成功）。</p><h6 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h6><p>Websocket是指前端在生成二维码后，会与后端建立连接，一旦后端发现二维码状态变化，可直接通过建立的连接主动推送信息给前端。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过前面的分析，我们已经知道了二维码扫码登录的一些关键点，现在我们把这些点串起来，来看一看二维码扫码登录的整体的实现流程。</p><p>以常用的轮询方式获取二维码状态为例</p><p>访问PC端二维码生成页面，PC端请求服务端获取二维码ID<br>服务端生成相应的二维码ID，设置二维码的过期时间，状态等。<br>PC获取二维码ID，生成相应的二维码。<br>手机端扫描二维码，获取二维码ID。<br>手机端将手机端token和二维码ID发送给服务端，确认登录。<br>服务端校验手机端token，根据手机端token和二维码ID生成PC端token<br>PC端通过轮询方式请求服务端，通过二维码ID获取二维码状态，如果已成功，返回PC  token，登录成功。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue中避免滥用this去读区data中数据</title>
      <link href="/2022/01/05/blog4/"/>
      <url>/2022/01/05/blog4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Vue中，data存放我们在页面中定义的变量，只要把数据进行赋值，在Vue组件中的任何一个地方都可以通过this来读取data中数据。data方便了我们在页面中进行数据的各种操作，但是滥用this去读取data中数据，会造成一些后果，我们应该避免滥用。<br><img src="/medias/images/01.jpg"></p><h3 id="一、用this读取data中数据的过程"><a href="#一、用this读取data中数据的过程" class="headerlink" title="一、用this读取data中数据的过程"></a>一、用this读取data中数据的过程</h3><p>在Vue源码中会把data中数据添加getter函数和setter函数，将其转成相应式的。getter函数代码如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">reactiveGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  var value <span class="token operator">=</span> getter ? getter.call<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> val<span class="token punctuation">;</span>  if<span class="token punctuation">(</span>Dep.target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dep.depend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      childOb.dep.depend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      if<span class="token punctuation">(</span>Array.isArray<span class="token punctuation">(</span>value<span class="token punctuation">))</span> <span class="token punctuation">{</span>        dependArray<span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用this读取data中数据时，会触发getter函数，在其中通过 var value = getter ? getter.call(obj) : val;获取到值后执行return value ,实现读取数据的目的。</p><p>但在其间还有一段代码，在这段代码中会经过一系列复杂的逻辑运算来收集依赖。（在Dep.target存在时会去收集依赖）</p><p>总结：在Dep.target存在时，使用this去读取data中数据时会去收集依赖。如果滥用this去读取data中数据，会多次重复地收集依赖，从而产生性能问题。</p><h3 id="二、Dep-target什么时候存在"><a href="#二、Dep-target什么时候存在" class="headerlink" title="二、Dep.target什么时候存在"></a>二、Dep.target什么时候存在</h3><p>Dep.target是由依赖赋值的。依赖又称为Watcher(侦听者)或者订阅者。在Vue中有三种依赖，其中两种是很常见的，就是watcher(侦听器)和computed(计算属性)。还有一种隐藏的依赖————渲染Watcher,在模版首次渲染的过程中创建。</p><p>Dep.target是在依赖创建时被赋值，依赖有构造函数Watcher创建。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> Watcher<span class="token punctuation">(</span>vm, expOrFn, cb, options, isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  //<span class="token punctuation">..</span>.  if<span class="token punctuation">(</span>typeof expOrFn <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     this.getter <span class="token operator">=</span> expOrFn<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    this.getter <span class="token operator">=</span> parsePath<span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  this.value <span class="token operator">=</span> this.lazy ? undefined <span class="token builtin class-name">:</span> expOrFn<span class="token punctuation">}</span><span class="token punctuation">;</span>Watcher.prototype.get <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function-name function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pushTarget<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>  try <span class="token punctuation">{</span>     value <span class="token operator">=</span> this.getter.call<span class="token punctuation">(</span>vm, vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> value<span class="token punctuation">}</span>Dep.target <span class="token operator">=</span> null<span class="token punctuation">;</span>const  targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> pushTarget<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  tagetStack.push<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  Dep.target <span class="token operator">=</span> target<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构造函数Watcher最后会执行实例方法get, 在实例方法get中执行pushTarget(this)中给Dep.target赋值的。</p><p>而依赖是在Vue页面或组件初次渲染时创建，所以产生的性能问题应该是首次渲染过慢的问题。</p><h3 id="三、在何处滥用this去读取data中数据"><a href="#三、在何处滥用this去读取data中数据" class="headerlink" title="三、在何处滥用this去读取data中数据"></a>三、在何处滥用this去读取data中数据</h3><p>在Dep.target存在时去执行这些滥用this去读取data中数据的代码时产生性能问题，故还要搞清楚这些代码是写在哪里才会被执行到，换句话来说，要搞清楚在哪滥用this去读取data中数据会产生性能问题。</p><p>在第二小节中介绍了Dep.target被赋值后执行value = this,getter.call(vm, vm),其中this.getter是一个函数，那么若在其中有用this去读取data数据，就会收集依赖，假如滥用的话就会产生性能问题。</p><p>this.getter是在创建依赖过程中赋值的，每种依赖的this.getter都是不相同的。下面来一一介绍。</p><p>watche(侦听器)依赖的this.getter是parsePath函数，其函数参数就是侦听的对象。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var bailRE <span class="token operator">=</span> new RegExp<span class="token variable"><span class="token punctuation">((</span>"[<span class="token operator">^</span>" <span class="token operator">+</span> <span class="token punctuation">(</span>unicodeRegExp.source<span class="token punctuation">)</span> <span class="token operator">+</span> ".$_\\d]"<span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> parsePath<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bailRE.test<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span>  <span class="token punctuation">}</span>  var segments <span class="token operator">=</span> path.split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin class-name">return</span> function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span>      <span class="token punctuation">}</span>      obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>segments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下所示的代码中的a和a.b.c作为参数传入parsePath函数会返回一个函数赋值给this.getter， 执行this.getter.call(vm, vm)会得到this.a和this.a.b.c的值。在这个过程中不会存在滥用this去读取data中数据的场景。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">watch: <span class="token punctuation">{</span>  a: function<span class="token punctuation">(</span>newVal, oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // to <span class="token keyword">do</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>vm.<span class="token variable">$watch</span><span class="token punctuation">(</span><span class="token string">'a.b.c'</span>, function<span class="token punctuation">(</span>newVal, oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>  // to <span class="token keyword">do</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>computed(计算属性)依赖的this.getter有两种，如果计算属性的值是个函数，那么this.getter就是这个函数。如果计算属性的值是个对象，那么this.getter就是这个对象的get属性值，get属性值也是个函数。在这个函数可能会存在滥用this去读取data中数据的场景，举个例子，代码如下所示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">computed: <span class="token punctuation">{</span>  d: <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>let key <span class="token keyword">in</span> this.a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      if<span class="token punctuation">(</span>this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + this.b + this.c<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + this.e + this.f<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在计算属性d中就存在滥用this去读取data数据。其中this.a是个数组，此时Dep.to的值为计算属性d这个依赖，在循环this.a中使用this去获取中a、b、c、e、f的数据，使这些数据进行一系列复杂的逻辑运算来重复地收集计算属性d这个依赖。导致获取计算属性d的值的速度变慢，从而产生性能问题。</p><p>渲染Watcher的this.getter是一个函数如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">updateComponent <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm._update<span class="token punctuation">(</span>vm._render<span class="token punctuation">(</span><span class="token punctuation">)</span>, hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中vm._render()会把template模版生成的渲染函数render转换成虚拟DOM(VNode)：vnode = render.call(vm._renderProxy, vm.$createElement),举一个例子来说明一下渲染函数render是什么</p><p>例如template模板:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过vue-loader会生成渲染函数render,如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>function <span class="token function-name function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  with<span class="token punctuation">(</span>this<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> _c<span class="token punctuation">(</span><span class="token string">'div'</span>, <span class="token punctuation">{</span>        attrs: <span class="token punctuation">{</span>            <span class="token string">"class"</span><span class="token builtin class-name">:</span> <span class="token string">"wrap"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>, <span class="token punctuation">[</span>_c<span class="token punctuation">(</span><span class="token string">'p'</span>, <span class="token punctuation">[</span>_v<span class="token punctuation">(</span>_s<span class="token punctuation">(</span>a<span class="token punctuation">))</span>, _c<span class="token punctuation">(</span><span class="token string">'span'</span>, <span class="token punctuation">[</span>_v<span class="token punctuation">(</span>_s<span class="token punctuation">(</span>b<span class="token punctuation">))</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中with语句的作用是为一个或一组语句指定默认对象，例with(this){ a + b } 等同this.a + this.b,那么在template模板中使用 相当使用this去读取data中的a数据。故在template模版生成的渲染函数render中也可能存在滥用this去读取data中数据的场景。举个例子，代码如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v-for<span class="token operator">=</span>item <span class="token keyword">in</span> list<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> arr<span class="token punctuation">[</span>item.index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> obj<span class="token punctuation">[</span>item.id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用v-for循环list数组过程中，不断用this去读取data中arr、obj的数据，使这些数据进行一系列复杂的逻辑运算来重复收集这个依赖，导致初次渲染的速度变慢，从而产生性能问题。</p><h3 id="四、如何避免滥用this去读取data中数据"><a href="#四、如何避免滥用this去读取data中数据" class="headerlink" title="四、如何避免滥用this去读取data中数据"></a>四、如何避免滥用this去读取data中数据</h3><p>综上所述在计算属性和template模板中滥用this去读取data中会导致多次重复地收集依赖，从而产生性能问题，那要怎么避免这种情况。</p><p>计算属性中如何避免</p><p>用ES6对象结构赋值来避免，计算属性的值是一个函数，其参数是Vue的实例化this对象，在上述计算属性中滥用this的例子中可以这样优化</p><p>优化前：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">computed:<span class="token punctuation">{</span>  d:<span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>let key <span class="token keyword">in</span> this.a<span class="token punctuation">)</span><span class="token punctuation">{</span>      if<span class="token punctuation">(</span>this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          result <span class="token operator">+=</span> this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + this.b + this.c<span class="token punctuation">;</span>      <span class="token punctuation">}</span>else<span class="token punctuation">{</span>          result <span class="token operator">+=</span> this.a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + this.e + this.f<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化后：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">computed: <span class="token punctuation">{</span>  d<span class="token punctuation">(</span><span class="token punctuation">{</span> a, b, c, e, f <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + b + c<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.num + e + f<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上利用解构赋值提前把data数据中的a、b、c、e、f赋值给对应的变量a、b、c、e、f，然后在计算属性中可以通过这些变量访问data数据的，且不会触发data中对应数据的依赖收集。这样只用this读取了一次data中的数据，只触发了一次依赖收集，避免了多次重复地依赖收集产生的性能问题。</p><p>template模板中如何避免</p><p>提前处理v-for循环所用的数据，不要在v-for循环中去读取数组、对象类型的数据。在上述template模板中滥用this的例子中可以这样优化。</p><p>假设list、arr、obj皆是服务端返回来的数据，且arr和obj没有用到任何模块渲染中，可以这样优化。</p><p>优化前:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v-for<span class="token operator">=</span>item <span class="token keyword">in</span> list<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> arr<span class="token punctuation">[</span>item.index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> obj<span class="token punctuation">[</span>item.id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化后:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v-for<span class="token operator">=</span>item <span class="token keyword">in</span> listData<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token punctuation">{</span><span class="token punctuation">{</span>item.name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item.age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token builtin class-name">export</span> default <span class="token punctuation">{</span>  <span class="token function-name function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>      list: <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token function-name function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    // 在这里定义arr和obj避免被转成响应式    this.arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    this.obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>,  computed: <span class="token punctuation">{</span>    listData: <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list.forEach<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        item.name <span class="token operator">=</span> this.arr<span class="token punctuation">[</span>item.index<span class="token punctuation">]</span>.name<span class="token punctuation">;</span>        item.age <span class="token operator">=</span> this.obj<span class="token punctuation">[</span>item.id<span class="token punctuation">]</span>.age<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token builtin class-name">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,<span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 如何处理 ES6 模块</title>
      <link href="/2021/12/23/blog3/"/>
      <url>/2021/12/23/blog3/</url>
      
        <content type="html"><![CDATA[<p>javascript的模块化有两种方式，一种Es6模块，另一种是CommandJS模块，这两种模块化方式是不兼容的。<br>很多人在使用Node.js的时候，只会使用require()加载模块，遇到Es6就不知道怎么使用了，本文将谈谈如何在Node中使用Es6模块加载。</p><h3 id="一、两种模块的差异"><a href="#一、两种模块的差异" class="headerlink" title="一、两种模块的差异"></a>一、两种模块的差异</h3><p>ES6 模块和 CommonJS 模块有很大的差异。</p><p>语法上面，CommonJS 模块使用require()加载和module.exports输出，ES6 模块使用import和export。</p><p>用法上面，require()是同步加载，后面的代码必须等待这个命令执行完，才会执行。import命令则是异步加载，或者更准确地说，ES6 模块有一个独立的静态解析阶段，依赖关系的分析是在那个阶段完成的，最底层的模块第一个执行。</p><h3 id="二、Node-js-的区分"><a href="#二、Node-js-的区分" class="headerlink" title="二、Node.js 的区分"></a>二、Node.js 的区分</h3><p>Node.js 要求 ES6 模块采用.mjs后缀文件名。也就是说，只要脚本文件里面使用import或者export命令，那么就必须采用.mjs后缀名。Node.js 遇到.mjs文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定”use strict”。</p><p>如果不希望将后缀名改成.mjs，可以在项目的package.json文件中，指定type字段为module。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"module"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一旦设置了以后，该目录里面的 JS 脚本，就被解释用 ES6 模块。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解释成 ES6 模块</span>$ node my-app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成.cjs。如果没有type字段，或者type字段为commonjs，则.js脚本会被解释成 CommonJS 模块。</p><p>总结为一句话：.mjs文件总是以 ES6 模块加载，.cjs文件总是以 CommonJS 模块加载，.js文件的加载取决于package.json里面type字段的设置。</p><p>注意，ES6 模块与 CommonJS 模块尽量不要混用。require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。</p><h3 id="三、CommonJS-模块加载-ES6-模块"><a href="#三、CommonJS-模块加载-ES6-模块" class="headerlink" title="三、CommonJS 模块加载 ES6 模块"></a>三、CommonJS 模块加载 ES6 模块</h3><p>CommonJS 的require()命令不能加载 ES6 模块，会报错，只能使用import()这个方法加载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  await import<span class="token punctuation">(</span><span class="token string">'./my-app.mjs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码可以在 CommonJS 模块中运行。<br>require()不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层await命令，导致无法被同步加载。</p><h3 id="四、ES6-模块加载-CommonJS-模块"><a href="#四、ES6-模块加载-CommonJS-模块" class="headerlink" title="四、ES6 模块加载 CommonJS 模块"></a>四、ES6 模块加载 CommonJS 模块</h3><p>ES6 模块的import命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 正确<span class="token function">import</span> packageMain from <span class="token string">'commonjs-package'</span><span class="token punctuation">;</span>// 报错<span class="token function">import</span> <span class="token punctuation">{</span> method <span class="token punctuation">}</span> from <span class="token string">'commonjs-package'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为 ES6 模块需要支持静态代码分析，而 CommonJS 模块的输出接口是module.exports，是一个对象，无法被静态分析，所以只能整体加载。</p><p>加载单一的输出项，可以写成下面这样。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> packageMain from <span class="token string">'commonjs-package'</span><span class="token punctuation">;</span>const <span class="token punctuation">{</span> method <span class="token punctuation">}</span> <span class="token operator">=</span> packageMain<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、同时支持两种格式的模块"><a href="#五、同时支持两种格式的模块" class="headerlink" title="五、同时支持两种格式的模块"></a>五、同时支持两种格式的模块</h3><p>一个模块同时要支持 CommonJS 和 ES6 两种格式，也很容易。</p><p>如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如export default obj，使得 CommonJS 可以用import()进行加载。</p><p>如果原始模块是 CommonJS 格式，那么可以加一个包装层。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> cjsModule from <span class="token string">'../index.js'</span><span class="token punctuation">;</span><span class="token builtin class-name">export</span> const foo <span class="token operator">=</span> cjsModule.foo<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。</p><p>你可以把这个文件的后缀名改为.mjs，或者将它放在一个子目录，再在这个子目录里面放一个单独的package.json文件，指明{ type: “module” }。</p><p>另一种做法是在package.json文件的exports字段，指明两种格式模块各自的加载入口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"exports"</span>：<span class="token punctuation">{</span>   <span class="token string">"require"</span><span class="token builtin class-name">:</span> <span class="token string">"./index.js"</span>，  <span class="token string">"import"</span><span class="token builtin class-name">:</span> <span class="token string">"./esm/wrapper.js"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码指定require()和import，加载该模块会自动切换到不一样的入口文件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js原生方法学习</title>
      <link href="/2021/12/10/blog2/"/>
      <url>/2021/12/10/blog2/</url>
      
        <content type="html"><![CDATA[<p>在前端开发中，我们会用到很多 javascript 自带的方法，熟练掌握这些方法能够大大提高我们的开发效率和编程能力，而在此基础上，进一步精通这些方法需要我们了解这些方法实现原理。<br>因此，本人通过查阅资料以及自己编程整理了这些方法的实现原理，通过学习，大家有了更多的底气对自己说，这些编程语言封装的 api 和方法我自己也能够进行实现。<br>写这篇文章的主要目的有两个： 1.重新巩固各种方法的实现方式 2.巩固基础，即使没有这些方法，也能考基础语法自己实现</p><h3 id="Array-篇"><a href="#Array-篇" class="headerlink" title="Array 篇"></a>Array 篇</h3><p>定义一个测试数组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const players <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name: <span class="token string">'科比'</span>, num: <span class="token number">24</span> <span class="token punctuation">}</span>,  <span class="token punctuation">{</span> name: <span class="token string">'詹姆斯'</span>, num: <span class="token number">23</span> <span class="token punctuation">}</span>,  <span class="token punctuation">{</span> name: <span class="token string">'保罗'</span>, num: <span class="token number">3</span> <span class="token punctuation">}</span>,  <span class="token punctuation">{</span> name: <span class="token string">'威少'</span>, num: <span class="token number">0</span> <span class="token punctuation">}</span>,  <span class="token punctuation">{</span> name: <span class="token string">'杜兰特'</span>, num: <span class="token number">35</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach"></a>1、forEach</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.dh_forEach <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>players.dh_forEach<span class="token punctuation">((</span>item, index, arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>item, index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>// <span class="token punctuation">{</span> name: <span class="token string">'科比'</span>, num: <span class="token number">24</span> <span class="token punctuation">}</span> <span class="token number">0</span>// <span class="token punctuation">{</span> name: <span class="token string">'詹姆斯'</span>, num: <span class="token number">23</span> <span class="token punctuation">}</span> <span class="token number">1</span>// <span class="token punctuation">{</span> name: <span class="token string">'保罗'</span>, num: <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token number">2</span>// <span class="token punctuation">{</span> name: <span class="token string">'威少'</span>, num: <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token number">3</span>// <span class="token punctuation">{</span> name: <span class="token string">'杜兰特'</span>, num: <span class="token number">35</span> <span class="token punctuation">}</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、map"><a href="#2、map" class="headerlink" title="2、map"></a>2、map</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.dh_map <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> target<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.dh_map<span class="token variable"><span class="token punctuation">((</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> `${item.name}<span class="token operator">--</span>${item.num}<span class="token operator">--</span>${index}`<span class="token punctuation">))</span></span>// <span class="token punctuation">[</span> <span class="token string">'科比--24--0'</span>, <span class="token string">'詹姆斯--23--1'</span>, <span class="token string">'保罗--3--2'</span>, <span class="token string">'威少--0--3'</span>, <span class="token string">'杜兰特--35--4'</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、filter"><a href="#3、filter" class="headerlink" title="3、filter"></a>3、filter</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.fx_filter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">))</span> <span class="token punctuation">{</span>      target.push<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.dh_filter<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.num <span class="token operator">&gt;=</span> <span class="token number">23</span><span class="token punctuation">))</span>// <span class="token punctuation">[</span>//     <span class="token punctuation">{</span> name: <span class="token string">'科比'</span>, num: <span class="token number">24</span> <span class="token punctuation">}</span>,//     <span class="token punctuation">{</span> name: <span class="token string">'詹姆斯'</span>, num: <span class="token number">23</span> <span class="token punctuation">}</span>,//     <span class="token punctuation">{</span> name: <span class="token string">'杜兰特'</span>, num: <span class="token number">35</span> <span class="token punctuation">}</span>// <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、every"><a href="#4、every" class="headerlink" title="4、every"></a>4、every</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.dh_every <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag <span class="token operator">=</span> callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">)</span>    if<span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token builtin class-name">break</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> flag<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_every<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.num <span class="token operator">&gt;=</span> <span class="token number">23</span><span class="token punctuation">))</span> // <span class="token boolean">false</span>console.log<span class="token punctuation">(</span>players.sx_every<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">))</span> // <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、some"><a href="#5、some" class="headerlink" title="5、some"></a>5、some</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_some <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag <span class="token operator">=</span> callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_some<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.num <span class="token operator">&gt;=</span> <span class="token number">23</span><span class="token punctuation">))</span> // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span>players.sx_some<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.num <span class="token operator">&gt;=</span> <span class="token number">50</span><span class="token punctuation">))</span> // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、reduce"><a href="#6、reduce" class="headerlink" title="6、reduce"></a>6、reduce</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_reduce <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback, <span class="token punctuation">..</span>.args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> start <span class="token operator">=</span> <span class="token number">0</span>, pre  <span class="token keyword">if</span> <span class="token punctuation">(</span>args.length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    pre <span class="token operator">=</span> this<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre <span class="token operator">=</span> callback<span class="token punctuation">(</span>pre, this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> pre<span class="token punctuation">}</span>// 计算所有num相加const <span class="token function">sum</span> <span class="token operator">=</span> players.sx_reduce<span class="token punctuation">((</span>pre, next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> pre + next.num<span class="token punctuation">}</span>, <span class="token number">0</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>sum<span class="token punctuation">)</span> // <span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7、findIndex"><a href="#7、findIndex" class="headerlink" title="7、findIndex"></a>7、findIndex</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.findIndex <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, i, this<span class="token punctuation">))</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_findIndex<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.name <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'科比'</span><span class="token punctuation">))</span> // <span class="token number">0</span>console.log<span class="token punctuation">(</span>players.sx_findIndex<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.name <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'安东尼'</span><span class="token punctuation">))</span> // -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8、find"><a href="#8、find" class="headerlink" title="8、find"></a>8、find</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_find <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>, i, index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_find<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.name <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'科比'</span><span class="token punctuation">))</span> // <span class="token punctuation">{</span> name: <span class="token string">'科比'</span>, num: <span class="token number">24</span> <span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_find<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> item.name <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'安东尼'</span><span class="token punctuation">))</span> // undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9、fill"><a href="#9、fill" class="headerlink" title="9、fill"></a>9、fill</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_fill <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value, start <span class="token operator">=</span> <span class="token number">0</span>, end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  end <span class="token operator">=</span> end <span class="token operator">||</span> this.length  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> this<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>players.sx_fill<span class="token punctuation">(</span><span class="token string">'林三心'</span>, <span class="token number">1</span>, <span class="token number">3</span><span class="token punctuation">))</span>// <span class="token punctuation">[</span>//     <span class="token punctuation">{</span> name: <span class="token string">'科比'</span>, num: <span class="token number">24</span> <span class="token punctuation">}</span>,//     <span class="token string">'林三心'</span>,//     <span class="token string">'林三心'</span>,//     <span class="token string">'林三心'</span>,//     <span class="token punctuation">{</span> name: <span class="token string">'杜兰特'</span>, num: <span class="token number">35</span> <span class="token punctuation">}</span>// <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10、includes"><a href="#10、includes" class="headerlink" title="10、includes"></a>10、includes</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_include <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value, start<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> start <span class="token operator">=</span> this.length + start<span class="token punctuation">;</span>  const isNaN <span class="token operator">=</span> Number.isNaN<span class="token punctuation">(</span>this<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    if<span class="token punctuation">(</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value <span class="token operator">||</span> this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> isNaN<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>.sx_includes<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">))</span> // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, NaN<span class="token punctuation">]</span>.sx_includes<span class="token punctuation">(</span>NaN<span class="token punctuation">))</span> // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>.sx_includes<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">1</span><span class="token punctuation">))</span> // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="11、join"><a href="#11、join" class="headerlink" title="11、join"></a>11、join</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_join <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  for<span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> this.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">=</span> i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span> ? <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str<span class="token punctuation">}</span>$<span class="token punctuation">{</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token builtin class-name">:</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str<span class="token punctuation">}</span>$<span class="token punctuation">{</span>s<span class="token punctuation">}</span>$<span class="token punctuation">{</span>this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> str<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>.sx_join<span class="token punctuation">(</span><span class="token punctuation">))</span> // <span class="token number">1,2</span>,3console.log<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>.sx_join<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">))</span> // <span class="token number">1</span>*2*3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="12、flat"><a href="#12、flat" class="headerlink" title="12、flat"></a>12、flat</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array.prototype.sx_flat <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">let</span> arr <span class="token operator">=</span> this<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr.some<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&gt;</span> Array.isArray<span class="token punctuation">(</span>item<span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.concat<span class="token punctuation">(</span><span class="token punctuation">..</span>.arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span>const testArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">3</span>, <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">8</span>, <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>testArr.sx_flat<span class="token punctuation">(</span><span class="token punctuation">))</span>// <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">8</span>, <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-篇"><a href="#Object-篇" class="headerlink" title="Object 篇"></a>Object 篇</h3><p>定义一个测试对象</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">'林三心'</span>,  age: <span class="token number">22</span>,  gender: <span class="token string">'男'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="13、entries"><a href="#13、entries" class="headerlink" title="13、entries"></a>13、entries</h5><p>用处：将对象转换成键值对数组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Object.prototype.sx_entries <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj.hasOwnProperty<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res.push<span class="token punctuation">(</span><span class="token punctuation">[</span>key, obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> res<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>Object.sx_entries<span class="token punctuation">(</span>obj<span class="token punctuation">))</span>// <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token string">'name'</span>, <span class="token string">'林三心'</span> <span class="token punctuation">]</span>, <span class="token punctuation">[</span> <span class="token string">'age'</span>, <span class="token number">22</span> <span class="token punctuation">]</span>, <span class="token punctuation">[</span> <span class="token string">'gender'</span>, <span class="token string">'男'</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14、fromEntries"><a href="#14、fromEntries" class="headerlink" title="14、fromEntries"></a>14、fromEntries</h5><p>用处：跟entries相反，将键值对数组转成对象</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Object.prototype.sx_fromEntries <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    const <span class="token punctuation">[</span>key, value<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> obj<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>Object.sx_fromEntries<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span>, <span class="token string">'林三心'</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">'age'</span>, <span class="token number">22</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">'gender'</span>, <span class="token string">'男'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">))</span>// <span class="token punctuation">{</span> name: <span class="token string">'林三心'</span>, age: <span class="token number">22</span>, gender: <span class="token string">'男'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="15、keys"><a href="#15、keys" class="headerlink" title="15、keys"></a>15、keys</h5><p>用处: 将对象的key转换成数组集合</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Object.prototype.sx_keys <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj.hasOwnProperty<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> keys.push<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> keys<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>Object.keys<span class="token punctuation">(</span>obj<span class="token punctuation">))</span>// <span class="token punctuation">[</span> <span class="token string">'name'</span>, <span class="token string">'age'</span>, <span class="token string">'gender'</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="16、values"><a href="#16、values" class="headerlink" title="16、values"></a>16、values</h5><p>用处：将对象的所有值转成数组集合</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Object.prototype.sx_values <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj.hasOwnProperty<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> values.push<span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> values<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>Object.sx_values<span class="token punctuation">(</span>obj<span class="token punctuation">))</span>// <span class="token punctuation">[</span> <span class="token string">'林三心'</span>, <span class="token number">22</span>, <span class="token string">'男'</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="17、instanceOf"><a href="#17、instanceOf" class="headerlink" title="17、instanceOf"></a>17、instanceOf</h5><p>用处：A instanceOf B，判断A是否经过B的原型链</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> instanceOf<span class="token punctuation">(</span>father, child<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const fp <span class="token operator">=</span> father.prototype  var <span class="token function">cp</span> <span class="token operator">=</span> child.__proto__  <span class="token keyword">while</span> <span class="token punctuation">(</span>cp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cp <span class="token operator">==</span><span class="token operator">=</span> fp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token function">cp</span> <span class="token operator">=</span> cp.__proto__  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">function</span> Person<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.name <span class="token operator">=</span> name<span class="token punctuation">}</span>const sx <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token string">'林三心'</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>instanceOf<span class="token punctuation">(</span>Person, sx<span class="token punctuation">))</span> // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span>instanceOf<span class="token punctuation">(</span>Person, sx2<span class="token punctuation">))</span> // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="18、is"><a href="#18、is" class="headerlink" title="18、is"></a>18、is</h5><p>用处：Object.is(a, b)，判断a是否等于b</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Object.prototype.sx_is <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x, y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span><span class="token operator">=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 防止 -0 和 +0    <span class="token builtin class-name">return</span> x <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> / x <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> / y  <span class="token punctuation">}</span>  // 防止NaN  <span class="token builtin class-name">return</span> x <span class="token operator">!=</span><span class="token operator">=</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span><span class="token operator">=</span> y<span class="token punctuation">}</span>const a <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">'林三心'</span> <span class="token punctuation">}</span>const b <span class="token operator">=</span> aconst c <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">'林三心'</span> <span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>Object.sx_is<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span> // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span>Object.sx_is<span class="token punctuation">(</span>a, c<span class="token punctuation">))</span> // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Function-篇"><a href="#Function-篇" class="headerlink" title="Function 篇"></a>Function 篇</h3><h5 id="19、call"><a href="#19、call" class="headerlink" title="19、call"></a>19、call</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Function.prototype.sx_call <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj, <span class="token punctuation">..</span>.args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj <span class="token operator">=</span> obj <span class="token operator">||</span> window  // Symbol是唯一的，防止重名key  const fn <span class="token operator">=</span> Symbol<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> this  // 执行，返回执行值  <span class="token builtin class-name">return</span> obj<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">..</span>.args<span class="token punctuation">)</span><span class="token punctuation">}</span>const testobj <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">'林三心'</span>,  testFn<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>this.name<span class="token punctuation">}</span>$<span class="token punctuation">{</span>age<span class="token punctuation">}</span>岁了<span class="token variable">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const testobj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">'sunshine_lin'</span><span class="token punctuation">}</span>testobj.testFn.sx_call<span class="token punctuation">(</span>testobj2, <span class="token number">22</span><span class="token punctuation">)</span> // sunshine_lin22岁了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="20、apply"><a href="#20、apply" class="headerlink" title="20、apply"></a>20、apply</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Function.prototype.sx_apply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj, args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj <span class="token operator">=</span> obj <span class="token operator">||</span> window  // Symbol是唯一的，防止重名key  const fn <span class="token operator">=</span> Symbol<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> this  // 执行，返回执行值  <span class="token builtin class-name">return</span> obj<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">..</span>.args<span class="token punctuation">)</span><span class="token punctuation">}</span>const testobj <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">'林三心'</span>,  testFn<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>this.name<span class="token punctuation">}</span>$<span class="token punctuation">{</span>age<span class="token punctuation">}</span>岁了<span class="token variable">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const testobj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">'sunshine_lin'</span><span class="token punctuation">}</span>testobj.testFn.sx_apply<span class="token punctuation">(</span>testobj2, <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span> // sunshine_lin22岁了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String-篇"><a href="#String-篇" class="headerlink" title="String 篇"></a>String 篇</h3><h5 id="21、slice"><a href="#21、slice" class="headerlink" title="21、slice"></a>21、slice</h5><p>参数代表含义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">String.prototype.sx_slice <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span>, end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> ? this.length + start <span class="token builtin class-name">:</span> start  end <span class="token operator">=</span> <span class="token operator">!</span>end <span class="token operator">&amp;&amp;</span> end <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span> ? this.length <span class="token builtin class-name">:</span> end  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token string">''</span>  <span class="token builtin class-name">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+=</span> this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> str<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>str.sx_slice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">))</span> // nshine_linconsole.log<span class="token punctuation">(</span>str.sx_slice<span class="token punctuation">(</span>-2<span class="token punctuation">))</span> // <span class="token keyword">in</span>console.log<span class="token punctuation">(</span>str.sx_slice<span class="token punctuation">(</span>-9, <span class="token number">10</span><span class="token punctuation">))</span> // shine_lconsole.log<span class="token punctuation">(</span>str.sx_slice<span class="token punctuation">(</span><span class="token number">5</span>, <span class="token number">1</span><span class="token punctuation">))</span> // <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="22、substr"><a href="#22、substr" class="headerlink" title="22、substr"></a>22、substr</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">String.prototype.sx_substr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span>, length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token string">''</span>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> ? this.length + start <span class="token builtin class-name">:</span> start  length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>length <span class="token operator">&amp;&amp;</span> length <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> length <span class="token operator">&gt;</span> this.length - start ? this.length <span class="token builtin class-name">:</span> start + length  <span class="token builtin class-name">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+=</span> this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> str<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>str.sx_substr<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">))</span> // shine_linconsole.log<span class="token punctuation">(</span>str.sx_substr<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">3</span><span class="token punctuation">))</span> // shiconsole.log<span class="token punctuation">(</span>str.sx_substr<span class="token punctuation">(</span><span class="token number">5</span>, <span class="token number">300</span><span class="token punctuation">))</span> // ine_lin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="23、substring"><a href="#23、substring" class="headerlink" title="23、substring"></a>23、substring</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">String.prototype.sx_sunstring <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span>, end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> ? this.length + start <span class="token builtin class-name">:</span> start  end <span class="token operator">=</span> <span class="token operator">!</span>end <span class="token operator">&amp;&amp;</span> end <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span> ? this.length <span class="token builtin class-name">:</span> end  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">[</span>start, end<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>end, start<span class="token punctuation">]</span>  <span class="token builtin class-name">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+=</span> this<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> str<span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>str.sx_sunstring<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">))</span> // nshine_linconsole.log<span class="token punctuation">(</span>str.sx_sunstring<span class="token punctuation">(</span>-2<span class="token punctuation">))</span> // <span class="token keyword">in</span>console.log<span class="token punctuation">(</span>str.sx_sunstring<span class="token punctuation">(</span>-9, <span class="token number">10</span><span class="token punctuation">))</span> // shine_lconsole.log<span class="token punctuation">(</span>str.sx_sunstring<span class="token punctuation">(</span><span class="token number">5</span>, <span class="token number">1</span><span class="token punctuation">))</span> // unsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise篇"><a href="#Promise篇" class="headerlink" title="Promise篇"></a>Promise篇</h3><h5 id="24、all"><a href="#24、all" class="headerlink" title="24、all"></a>24、all</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript继承的方式</title>
      <link href="/2021/12/07/blog1/"/>
      <url>/2021/12/07/blog1/</url>
      
        <content type="html"><![CDATA[<p>最近项目比较空闲，趁着有多余的时间自己搭建了博客官网，整理出来javascript的继承方式</p><h3 id="1、原型继承"><a href="#1、原型继承" class="headerlink" title="1、原型继承"></a>1、原型继承</h3><p>每个函数都有一个prototype，即原型对象，原型对象有一个constructor，指向其构造函数，每个构造函数的实例又有一个指针__proto__指向原型<br>继承的本质就是复制，即重写圆形对象，代之以一个新类型的实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType.prototype.getSuperValue <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> this.property<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-name function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//关键，将子类型的原型指向父类创建的实例SubType.prototype <span class="token operator">=</span> new SuperType<span class="token punctuation">(</span><span class="token punctuation">)</span>//子类原型上添加子类方法SubType.prototype.getSubValue <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> this.subproperty<span class="token punctuation">}</span>const instance <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>instance.getSuperValue<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型链方案存在的缺点：多个实例对引用类型的操作会被篡改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"blue"</span>, <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> SubType<span class="token punctuation">(</span><span class="token punctuation">)</span>Subtype.prototype <span class="token operator">=</span> new SuperType<span class="token punctuation">(</span><span class="token punctuation">)</span>const instance1 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token punctuation">)</span>instance1.colors.push<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>instance1.colors<span class="token punctuation">)</span> //<span class="token string">"red,blue,green,black"</span>const instance2 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>instance2.colors<span class="token punctuation">)</span> //<span class="token string">"red,blue,green,black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、借用构造函数继承"><a href="#2、借用构造函数继承" class="headerlink" title="2、借用构造函数继承"></a>2、借用构造函数继承</h3><p>实质上是创建一个父类的实例，将this指向子类，用来增强子类实例（不实用原型）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  //继承自SuperType  SuperType.call<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">}</span>const instance1 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1.color.push<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>instance1.color<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"red,green,blue,black"</span>const instance2 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>instance2.color<span class="token punctuation">)</span> //<span class="token string">"red,green,blue"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：<br>只能继承父类的实例属性和方法，不能继承原型属性/方法<br>无法实现复用，每个子类都有父类实例函数的副本，影响性能</p><h3 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h3><p>组合原型继承和构造继承。用原型链实现对原型属性和方法的继承，用构造函数技术来实现实例属性的机车鞥。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> SuperType<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>  this.colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"blue"</span>, <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType.prototype.sayName <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> SubType<span class="token punctuation">(</span>name, age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  //继承属性  //第二次调用SuperType<span class="token punctuation">(</span><span class="token punctuation">)</span>  SuperType.call<span class="token punctuation">(</span>this, name<span class="token punctuation">)</span>  this.age <span class="token operator">=</span> age<span class="token punctuation">}</span>// 继承方法// 构建原型链// 第一次调用SuperType<span class="token punctuation">(</span><span class="token punctuation">)</span>SubType.prototype <span class="token operator">=</span> new SuperType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 重写SubType.prototype的constructor属性，指向自己的构造函数SubTypeSubType.prototype.constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span> SubType.prototype.sayAge <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>this.age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var instance1 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token string">"Nicholas"</span>, <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1.colors.push<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>instance1.colors<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"red,blue,green,black"</span>instance1.sayName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"Nicholas"</span><span class="token punctuation">;</span>instance1.sayAge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //29var instance2 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token string">"Greg"</span>, <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>instance2.colors<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"red,blue,green"</span>instance2.sayName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"Greg"</span><span class="token punctuation">;</span>instance2.sayAge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：<br>第一个调用SuperType() : 给SubType.prototype 写入两个属性name,color<br>第二次调用SuperType() : 给instance1写入两个属性name, color<br>实例对象instance1上的两个属性就屏蔽了其原型对象SubType.prototype的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法。</p><h3 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h3><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> object<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function-name function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  F.prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token builtin class-name">return</span> new F<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>object()对传入其中的对象执行了一个浅复制，将构造函数F的原型直接指向传入的对象</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const person <span class="token operator">=</span> <span class="token punctuation">{</span>   name: <span class="token string">"Nicholas"</span>,   friends: <span class="token punctuation">[</span><span class="token string">"Shelby"</span>, <span class="token string">"Court"</span>, <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>const anotherPerson <span class="token operator">=</span> object<span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson.name <span class="token operator">=</span> <span class="token string">"Greg"</span>anotherPerson.friends.push<span class="token punctuation">(</span><span class="token string">"Ron"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：<br>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能<br>无法传递参数</p><p>另外，ES5中存在Object.create()的方法，能够代替上面的object方法</p><h3 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h3><p>核心：在原型式继承的基础上，增强对象，返回构造函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> createAnothenr<span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const clone <span class="token operator">=</span> object<span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>  clone.sayHi <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> clone<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数的主要作用是为构造函数新增属性和方法，以加强函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const person <span class="token operator">=</span> <span class="token punctuation">{</span>  name: <span class="token string">"Nicholas"</span>,  friends: <span class="token punctuation">[</span><span class="token string">"Shelby"</span>, <span class="token string">"Court"</span>, <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>const anotherPerson <span class="token operator">=</span> createAnothenr<span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson.sayHi<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点(同原型式继承):<br>1、原型链继承多个实例的引用类型属性指向相同，存在篡改的可能<br>2、无法传递参数</p><h3 id="6、寄生组合式继承"><a href="#6、寄生组合式继承" class="headerlink" title="6、寄生组合式继承"></a>6、寄生组合式继承</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> inheritPrototype<span class="token punctuation">(</span>subType, superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const prototype <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>superType.prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> //创建对象，创建父类原型的一个副本  prototype.constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span> //增强对象，补充因重写原型而失去的默认的constructor值  subType.prototype <span class="token operator">=</span> prototype //指定对象，将新创建的对象赋予给子类的原型<span class="token punctuation">}</span>//父类初始化实例属性和原型属性<span class="token keyword">function</span> SuperType<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>  this.colors <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"red"</span>, <span class="token string">"blue"</span>, <span class="token string">"green"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>SuperType.prototype.sayName <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//利用构造函数传递子类实例属性<span class="token punctuation">(</span>支持传参和实例修改<span class="token punctuation">)</span><span class="token keyword">function</span> SubType<span class="token punctuation">(</span>name, age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType.call<span class="token punctuation">(</span>this, name<span class="token punctuation">)</span>  this.age <span class="token operator">=</span> age<span class="token punctuation">}</span>//将父类原型指向子类inheritPrototype<span class="token punctuation">(</span>SubType, SuperType<span class="token punctuation">)</span>//新增子类原型属性 SubType.prototype.sayAge <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  alert<span class="token punctuation">(</span>this.age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>var instance1 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token string">"xyc"</span>, <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var instance2 <span class="token operator">=</span> new SubType<span class="token punctuation">(</span><span class="token string">"lxy"</span>, <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1.colors.push<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"blue"</span>, <span class="token string">"green"</span>, <span class="token string">"2"</span><span class="token punctuation">]</span>instance1.colors.push<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"blue"</span>, <span class="token string">"green"</span>, <span class="token string">"3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子的高效率体现在它只调用了一次SuperType&nbsp;构造函数，并且因此避免了在SubType.prototype&nbsp;上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用instanceof&nbsp;和isPrototypeOf()<br>这是最成熟的方法，也是现在库实现的方法</p><h3 id="7、混入方式继承多个对象"><a href="#7、混入方式继承多个对象" class="headerlink" title="7、混入方式继承多个对象"></a>7、混入方式继承多个对象</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperClass.call<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>  OtherSuperClass.call<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//继承一个类MyClass.prototype <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>SuperClass.prototype<span class="token punctuation">)</span>// 混合其它Object.assign<span class="token punctuation">(</span>MyClass.prototype, OtherSuperClass.prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>// 重新指定constructorMyClass.prototype.constructor <span class="token operator">=</span> MyClass<span class="token punctuation">;</span>MyClass.prototype.myMethod <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  // <span class="token keyword">do</span> something<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、ES6类继承extends"><a href="#8、ES6类继承extends" class="headerlink" title="8、ES6类继承extends"></a>8、ES6类继承extends</h3><p>extends关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中constructor表示构造函数，一个类中只能有一个构造函数，有多个会报出SyntaxError错误,如果没有显式指定构造方法，则会添加默认的 constructor方法，使用例子如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Rectangle <span class="token punctuation">{</span>  // constructor  constructor<span class="token punctuation">(</span>height, width<span class="token punctuation">)</span> <span class="token punctuation">{</span>      this.height <span class="token operator">=</span> height<span class="token punctuation">;</span>      this.width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    // Getter  get <span class="token function-name function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> this.calcArea<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    // Method  <span class="token function-name function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin class-name">return</span> this.height * this.width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const rectangle <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>rectangle.area<span class="token punctuation">)</span><span class="token punctuation">;</span>// 输出 <span class="token number">200</span>-----------------------------------------------------------------// 继承class Square extends Rectangle <span class="token punctuation">{</span>  constructor<span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    super<span class="token punctuation">(</span>length, length<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super<span class="token punctuation">(</span><span class="token punctuation">)</span>。    this.name <span class="token operator">=</span> <span class="token string">'Square'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  get <span class="token function-name function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> this.height * this.width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>const square <span class="token operator">=</span> new Square<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>square.area<span class="token punctuation">)</span><span class="token punctuation">;</span>// 输出 <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>extends继承的核心代码如下，其实现和上述的寄生组合式继承方式一样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> _inherits<span class="token punctuation">(</span>subType, superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 创建对象，创建父类原型的一个副本  // 增强对象，弥补因重写原型而失去的默认的constructor 属性  // 指定对象，将新创建的对象赋值给子类的原型  subType.prototype <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>superType <span class="token operator">&amp;&amp;</span> superType.prototype, <span class="token punctuation">{</span>    constructor: <span class="token punctuation">{</span>        value: subType,        enumerable: false,        writable: true,        configurable: <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object.setPrototypeOf         ? Object.setPrototypeOf<span class="token punctuation">(</span>subType, superType<span class="token punctuation">)</span>         <span class="token builtin class-name">:</span> subType.__proto__ <span class="token operator">=</span> superType<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结</p><p>1、函数声明和类声明的区别</p><p>函数声明会提升，类声明不会。首先需要声明你的类，然后访问它，否则像下面的代码会抛出一个ReferenceError</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">let</span> p <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // ReferenceErrorclass Rectangle <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、ES5继承和ES6继承的区别</p><p>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）.</p><p>ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
